{
	"info": {
		"_postman_id": "2a949173-168b-4faf-9382-c86f0914ea06",
		"name": "GitHub API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32616154"
	},
	"item": [
		{
			"name": "Get All Open Issues",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"if(jsonData.length > 0) {\r",
							"    pm.globals.set(\"openIssueNumber\", jsonData[0].number);\r",
							"    console.log(jsonData[0].number)\r",
							"    postman.setNextRequest(\"Close Issue\");\r",
							"}\r",
							"else {\r",
							"    postman.setNextRequest(\"Create Issue\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "token {{token1}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/{{user1}}/{{repo1}}/issues?state=open",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{user1}}",
						"{{repo1}}",
						"issues"
					],
					"query": [
						{
							"key": "state",
							"value": "open"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Close Issue",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Here we check that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Here we check that the issue is closed\r",
							"pm.test(\"Issue is closed\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.state).to.eql(\"closed\");\r",
							"});\r",
							"\r",
							"// with this snippet the execution is moved to the previous step as a next step named \"Get All Open Issues\"\r",
							"postman.setNextRequest(\"Get All Open Issues\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "token {{token1}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"state\": \"closed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/{{user1}}/{{repo1}}/issues/{{openIssueNumber}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{user1}}",
						"{{repo1}}",
						"issues",
						"{{openIssueNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create issue",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"// Get current time and set it as variable\r",
							"pm.globals.set(\"issueName\", \"Found a bug at \" + moment());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This row was removed from each snipped and pasted here as a general for all\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// This row is required for the timestamp check\r",
							"var moment = require('moment');\r",
							"\r",
							"// With this row we set a global variable in order to get the issue number\r",
							"pm.globals.set(\"issueNumber\", jsonData.number);\r",
							"\r",
							"// Creating an issue\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Checking that the issue has a number\r",
							"pm.test(\"Issue number exists\", function () {\r",
							"    pm.expect(jsonData.number).to.be.a('number');\r",
							"}); \r",
							"\r",
							"// Checking that the title is the same as the one recorded\r",
							"pm.test(\"Title is correct\", function () {\r",
							"    var issueName = pm.globals.get(\"issueName\");\r",
							"    pm.expect(jsonData.title).to.equals(issueName);\r",
							"}); \r",
							"\r",
							"// Checking that the body is the same as the one recorded\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.expect(jsonData.body).to.eql(\"I am having a problem with this\");\r",
							"}); \r",
							"\r",
							"// Checking that the logged user is the same as the one recorded\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.test(\"User is correct\", function () {\r",
							"    pm.expect(jsonData.user.login).to.eql(\"YordanMitev\");\r",
							"}); \r",
							"\r",
							"// Checking that the label is the same as the one recorded\r",
							"pm.test(\"Label is correct\", function () {\r",
							"    pm.expect(jsonData.labels[0].name).to.eql(\"bug\");\r",
							"    pm.expect(jsonData.labels.length).to.eql(1);\r",
							"}); \r",
							"\r",
							"// Checking that the created date is correct\r",
							"pm.test(\"Created at is correct\", function () {\r",
							"    pm.expect(jsonData.created_at).to.contains(moment().format(\"YYYY-MM-DD\"));\r",
							"}); \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "token {{token1}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{issueName}}\",\r\n    \"body\": \"I am having a problem with this\",\r\n    \"labels\": [\r\n        \"bug\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/{{user1}}/{{repo1}}/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{user1}}",
						"{{repo1}}",
						"issues"
					]
				}
			},
			"response": []
		}
	]
}